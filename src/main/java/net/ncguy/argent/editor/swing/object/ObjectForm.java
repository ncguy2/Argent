package net.ncguy.argent.editor.swing.object;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import net.ncguy.argent.core.VarRunnables;
import net.ncguy.argent.editor.ConfigurableAttribute;
import net.ncguy.argent.editor.IConfigurable;
import net.ncguy.argent.editor.swing.components.JDraggableTree;
import net.ncguy.argent.editor.shared.config.builders.SwingComponentBuilder;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import java.awt.*;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.util.List;

/**
 * Created by Guy on 28/06/2016.
 */
public class ObjectForm<T> {

    private ObjectEditor<T> editorController;
    private JPanel panel1;
    private JDraggableTree worldObjTree;
    private JButton addObjectBtn;
    private JTabbedPane tabbedPane1;
    private JPanel configPane;
    private JScrollPane configScroller;

    private SwingComponentBuilder componentBuilder;
    private VarRunnables.VarRunnable<T> onSelect;
    private DefaultMutableTreeNode rootNode;

    public ObjectForm(ObjectEditor<T> objectEditor) {
        this.editorController = objectEditor;
        $$$setupUI$$$();
        this.componentBuilder = SwingComponentBuilder.instance();
        onSelect = this::select;
        init();
    }

    private void init() {
//        select(editorController.gameWorld.selected());
        editorController.gameWorld.addOnSelect(onSelect);

        worldObjTree.removeAll();
        rootNode = new DefaultMutableTreeNode("World Objects");
        reassertTree();
        DefaultTreeModel treeModel = new DefaultTreeModel(rootNode);
        worldObjTree.setModel(treeModel);
        worldObjTree.addTreeSelectionListener(e -> {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) worldObjTree.getLastSelectedPathComponent();
            Object obj = node.getUserObject();
            T t = null;
            try {
                t = (T) obj;
            } catch (Exception ignored) {
            }
            if (t != null)
                editorController.gameWorld.select(t);
        });
    }

    private void reassertTree() {
        rootNode.removeAllChildren();
        editorController.gameWorld.instances().forEach(i -> rootNode.add(new DefaultMutableTreeNode(i)));
    }

    private void select(T obj) {
        if (!(obj instanceof IConfigurable)) return;
        IConfigurable cfg = (IConfigurable) obj;
        List<ConfigurableAttribute<?>> attrs = cfg.getConfigAttrs();
        componentBuilder.compileSet(configPane, attrs);
//        configPane.removeAll();
//        int rows = configPane.getHeight() / 30;
//        if (rows < attrs.size()) rows = attrs.size() + 1;
//        configPane.setLayout(new GridLayoutManager(rows, 3, new Insets(0, 0, 0, 0), -1, 0, false, true));
//        final int[] index = new int[]{0};
//        attrs.forEach(ca -> {
//            System.out.println(ca.displayName());
//            Object compObj = componentBuilder.buildComponent(ca);
//            if (compObj instanceof Component) {
//                configPane.add(new JLabel(ca.displayName()), new GridConstraints(index[0], 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 24), null, 0, false));
//                configPane.add((Component) compObj, new GridConstraints(index[0], 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 24), null, 0, false));
//                index[0]++;
//            }
//        });
//        configPane.invalidate();
//        configPane.repaint();
    }

    private void createUIComponents() {
        configPane = new JPanel();
        configPane.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, 4, false, true));
        configPane.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                select(editorController.gameWorld.selected());
            }
        });
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JSplitPane splitPane1 = new JSplitPane();
        splitPane1.setContinuousLayout(true);
        panel1.add(splitPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        splitPane1.setLeftComponent(panel2);
        worldObjTree = new JDraggableTree();
        panel2.add(worldObjTree, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.add(panel3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, true));
        addObjectBtn = new JButton();
        addObjectBtn.setText("Add Object");
        panel3.add(addObjectBtn, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        splitPane1.setRightComponent(panel4);
        tabbedPane1 = new JTabbedPane();
        panel4.add(tabbedPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("Object", panel5);
        configScroller = new JScrollPane();
        configScroller.setHorizontalScrollBarPolicy(30);
        panel5.add(configScroller, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        configScroller.setViewportView(configPane);
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("Material", panel6);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
