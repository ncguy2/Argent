/* The following code was generated by JFlex 1.4.3 on 3/10/13 11:05 AM */

package net.ncguy.argent.diagnostics.swing.syntax.token;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexCTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenImpl;

import javax.swing.text.Segment;
import java.io.IOException;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/10/13 11:05 AM from the specification file
 * <tt>GLSLTokenMaker.flex</tt>
 */
public class GLSLTokenMaker extends AbstractJFlexCTokenMaker {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int EOL_COMMENT = 4;
    public static final int YYINITIAL = 0;
    public static final int MLC = 2;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     *                  at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0,  0,  1,  1,  2, 2
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\44\1\37\1\0\1\44\1\52\22\0\1\44\1\32\1\40"+
                    "\1\53\1\54\1\61\1\106\1\27\1\25\1\25\1\45\1\7\1\60"+
                    "\1\33\1\50\1\26\1\43\1\35\1\74\1\75\1\76\3\5\2\3"+
                    "\1\64\1\57\1\30\1\24\1\31\1\23\1\55\2\4\1\101\1\100"+
                    "\1\6\1\51\5\1\1\47\5\1\1\103\1\102\1\1\1\46\2\1"+
                    "\1\36\2\1\1\56\1\34\1\56\1\105\1\2\1\0\1\42\1\66"+
                    "\1\70\1\10\1\11\1\12\1\71\1\62\1\13\1\1\1\67\1\15"+
                    "\1\72\1\14\1\20\1\63\1\1\1\17\1\16\1\41\1\21\1\22"+
                    "\1\65\1\77\1\73\1\1\1\104\1\107\1\104\1\60\uff81\0";

    /**
     * Translates characters to character classes
     */
    private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int [] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\3\0\1\1\1\2\1\3\1\4\12\2\2\4\1\5"+
                    "\1\4\1\6\4\4\1\2\1\7\1\10\2\2\1\3"+
                    "\1\11\1\4\2\1\7\2\2\4\2\12\1\13\5\12"+
                    "\1\14\2\12\2\15\2\3\1\16\1\17\5\2\2\17"+
                    "\13\2\1\0\1\20\1\21\2\22\1\23\1\6\2\10"+
                    "\1\24\4\2\1\15\5\1\1\0\7\2\2\0\1\25"+
                    "\6\0\1\3\1\0\1\3\1\15\1\16\4\2\1\26"+
                    "\1\2\1\27\10\2\1\6\1\30\1\6\3\22\1\6"+
                    "\2\10\1\31\2\2\1\32\4\1\1\33\2\1\5\0"+
                    "\7\2\10\0\1\16\1\0\11\2\1\6\1\10\1\2"+
                    "\2\32\7\1\4\0\1\33\2\0\3\2\1\26\2\0"+
                    "\1\34\2\0\1\35\6\2\1\32\1\1\1\33\2\1"+
                    "\7\0\2\2\4\0\4\2\1\1\1\0\1\33\2\0"+
                    "\3\2\1\1\1\0\5\2\1\0\1\2\3\26\16\2"+
                    "\1\33\2\2";

    private static int [] zzUnpackAction() {
        int [] result = new int[282];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
                    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438"+
                    "\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678"+
                    "\0\u0558\0\u06c0\0\330\0\u0558\0\u0708\0\u0750\0\u0798\0\u07e0"+
                    "\0\u0828\0\u0870\0\u0558\0\u08b8\0\u0558\0\u0900\0\u0948\0\u0990"+
                    "\0\u09d8\0\u0a20\0\u0a68\0\u0ab0\0\u0af8\0\u0b40\0\u0b88\0\u0558"+
                    "\0\u0bd0\0\u0c18\0\u0c60\0\u0ca8\0\u0cf0\0\u0558\0\u0d38\0\u0d80"+
                    "\0\u0dc8\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0"+
                    "\0\u1008\0\u1050\0\u1098\0\u0120\0\u10e0\0\u1128\0\u1170\0\u11b8"+
                    "\0\u1200\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8"+
                    "\0\u1440\0\u0558\0\u0558\0\u1488\0\u14d0\0\u0558\0\u1518\0\u1560"+
                    "\0\u15a8\0\u0558\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u1710\0\u1758"+
                    "\0\u17a0\0\u17e8\0\u1830\0\u1878\0\u18c0\0\u1908\0\u1950\0\u1998"+
                    "\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u0558\0\u1b90"+
                    "\0\u1bd8\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88\0\u0dc8"+
                    "\0\u1dd0\0\u0dc8\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0\0\u0120\0\u1f38"+
                    "\0\u0120\0\u1f80\0\u1fc8\0\u2010\0\u2058\0\u20a0\0\u20e8\0\u2130"+
                    "\0\u2178\0\u21c0\0\u0558\0\u2208\0\u2250\0\u2298\0\u22e0\0\u2328"+
                    "\0\u2370\0\u23b8\0\u0558\0\u2400\0\u2448\0\u2490\0\u24d8\0\u2520"+
                    "\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u26d0\0\u2718\0\u2760"+
                    "\0\u27a8\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u2910\0\u2958\0\u29a0"+
                    "\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\u2b50\0\u2b98\0\u2be0"+
                    "\0\u2c28\0\u2c70\0\u2cb8\0\u2d00\0\u10e0\0\u2d48\0\u2d90\0\u2dd8"+
                    "\0\u2e20\0\u2e68\0\u2eb0\0\u2ef8\0\u2f40\0\u2f88\0\u2fd0\0\u3018"+
                    "\0\u3060\0\u30a8\0\u30f0\0\u3138\0\u3180\0\u31c8\0\u3210\0\u3258"+
                    "\0\u32a0\0\u32e8\0\u3330\0\u3378\0\u33c0\0\u3408\0\u3450\0\u3498"+
                    "\0\u34e0\0\u3528\0\u3570\0\u35b8\0\u3600\0\u3648\0\u3690\0\u36d8"+
                    "\0\u3720\0\u3768\0\u37b0\0\u37f8\0\u3840\0\u3888\0\u38d0\0\u0dc8"+
                    "\0\u3918\0\330\0\u3960\0\u39a8\0\u39f0\0\u3a38\0\u3a80\0\u3ac8"+
                    "\0\u3b10\0\u3b58\0\u3ba0\0\u3be8\0\u3c30\0\u3c78\0\u3648\0\u3cc0"+
                    "\0\u3720\0\u3d08\0\u3d50\0\u3d98\0\u3de0\0\u3e28\0\u3e70\0\u0558"+
                    "\0\u3eb8\0\u3f00\0\u3f48\0\u3f90\0\u3fd8\0\u4020\0\u4068\0\u40b0"+
                    "\0\u40f8\0\u4140\0\u4188\0\u41d0\0\u4218\0\u4260\0\u42a8\0\u42f0"+
                    "\0\u4338\0\u4380\0\u43c8\0\u4410\0\u4458\0\u44a0\0\u44e8\0\u4530"+
                    "\0\u4578\0\u45c0\0\u4608\0\u4650\0\u4698\0\u46e0\0\u4728\0\u0120"+
                    "\0\u4770\0\u47b8";

    private static int [] zzUnpackRowMap() {
        int [] result = new int[282];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int [] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int [] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\4\2\5\1\6\1\5\1\6\1\5\1\7\1\10"+
                    "\1\11\1\12\1\13\1\5\1\14\1\15\1\16\1\17"+
                    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
                    "\1\30\1\31\1\32\1\33\1\6\1\5\1\34\1\35"+
                    "\1\36\1\37\1\40\1\41\1\23\2\5\1\42\1\5"+
                    "\1\43\1\44\2\4\1\24\1\45\1\31\1\23\1\46"+
                    "\1\5\1\31\1\47\1\50\1\5\1\51\1\52\1\53"+
                    "\1\5\3\6\5\5\1\24\1\31\1\54\1\55\12\56"+
                    "\1\57\24\56\1\60\5\56\1\61\14\56\1\62\2\56"+
                    "\1\63\22\56\12\64\1\65\24\64\1\66\22\64\1\67"+
                    "\2\64\1\70\22\64\7\4\1\0\13\4\11\0\3\4"+
                    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
                    "\4\0\2\4\1\0\17\4\4\0\1\4\6\5\1\0"+
                    "\13\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
                    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
                    "\1\0\17\5\4\0\3\71\1\6\1\71\1\6\1\72"+
                    "\1\0\1\71\1\72\3\71\1\73\3\71\1\74\1\71"+
                    "\11\0\1\71\1\6\1\71\2\0\2\71\1\6\2\0"+
                    "\1\74\1\73\1\75\1\71\1\0\3\71\4\0\2\71"+
                    "\1\0\7\71\3\6\5\71\13\0\1\31\14\0\1\31"+
                    "\63\0\1\4\6\5\1\0\10\5\1\76\1\5\1\77"+
                    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
                    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
                    "\5\5\1\100\11\5\4\0\1\4\6\5\1\0\5\5"+
                    "\1\101\5\5\11\0\1\4\2\5\2\0\3\5\2\0"+
                    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
                    "\2\5\1\0\17\5\4\0\1\4\6\5\1\0\5\5"+
                    "\1\102\2\5\1\103\1\5\1\77\11\0\1\4\2\5"+
                    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\17\5\4\0\1\4"+
                    "\6\5\1\0\2\5\1\104\1\5\1\105\5\5\1\77"+
                    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
                    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
                    "\17\5\4\0\1\4\6\5\1\0\10\5\1\106\2\5"+
                    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
                    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
                    "\17\5\4\0\1\4\6\5\1\0\3\5\1\107\7\5"+
                    "\11\0\1\4\2\5\2\0\1\110\1\111\1\5\2\0"+
                    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
                    "\2\5\1\0\1\112\16\5\4\0\1\4\6\5\1\0"+
                    "\1\5\1\113\11\5\11\0\1\4\2\5\2\0\3\5"+
                    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
                    "\4\0\2\5\1\0\17\5\4\0\1\4\6\5\1\0"+
                    "\11\5\1\114\1\5\11\0\1\4\2\5\2\0\3\5"+
                    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
                    "\4\0\2\5\1\0\17\5\4\0\1\4\6\5\1\0"+
                    "\4\5\1\115\6\5\11\0\1\4\2\5\2\0\3\5"+
                    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
                    "\4\0\2\5\1\0\17\5\4\0\1\4\6\5\1\0"+
                    "\1\5\1\116\6\5\1\117\2\5\11\0\1\4\2\5"+
                    "\2\0\1\5\1\120\1\5\2\0\2\5\1\0\1\5"+
                    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\17\5"+
                    "\27\0\1\121\110\0\1\31\217\0\1\31\1\0\1\122"+
                    "\16\0\1\123\42\0\23\124\1\125\3\124\1\126\4\124"+
                    "\1\127\2\124\1\0\50\124\30\0\1\23\110\0\1\23"+
                    "\102\0\1\31\6\0\1\31\54\0\34\35\1\130\2\35"+
                    "\1\131\1\132\47\35\1\4\6\5\1\0\1\5\1\133"+
                    "\11\5\11\0\1\4\2\5\2\0\1\5\1\107\1\5"+
                    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
                    "\4\0\2\5\1\0\17\5\4\0\1\4\6\5\1\0"+
                    "\6\5\1\134\4\5\11\0\1\4\2\5\2\0\1\135"+
                    "\2\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
                    "\1\4\4\0\2\5\1\0\3\5\1\136\13\5\4\0"+
                    "\3\71\1\6\1\71\1\6\1\72\1\0\1\71\1\72"+
                    "\3\71\1\73\3\71\1\74\1\71\11\0\1\71\1\6"+
                    "\1\137\2\0\2\71\1\6\2\0\1\74\1\73\1\75"+
                    "\1\71\1\0\3\71\4\0\2\71\1\0\7\71\3\6"+
                    "\1\137\4\71\50\0\1\41\46\0\1\75\1\0\1\75"+
                    "\27\0\1\75\5\0\1\75\30\0\3\75\11\0\7\4"+
                    "\1\0\1\140\1\141\1\4\1\142\5\4\1\143\1\144"+
                    "\11\0\3\4\2\0\3\4\1\145\1\0\2\4\1\0"+
                    "\1\4\1\0\3\4\4\0\2\4\1\0\17\4\4\0"+
                    "\1\4\6\5\1\0\12\5\1\77\11\0\1\4\2\5"+
                    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\17\5\4\0\1\4"+
                    "\6\5\1\0\13\5\11\0\1\4\2\5\2\0\3\5"+
                    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
                    "\4\0\1\146\1\5\1\0\17\5\4\0\1\4\6\5"+
                    "\1\0\7\5\1\147\1\150\1\5\1\77\11\0\1\4"+
                    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
                    "\1\4\1\5\1\4\4\0\2\5\1\0\17\5\4\0"+
                    "\1\4\6\5\1\0\10\5\1\151\2\5\11\0\1\4"+
                    "\2\5\2\0\1\5\1\101\1\5\2\0\2\5\1\0"+
                    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
                    "\17\5\4\0\1\4\6\5\1\0\5\5\1\152\2\5"+
                    "\1\153\2\5\11\0\1\4\2\5\2\0\3\5\2\0"+
                    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
                    "\2\5\1\0\17\5\4\0\1\4\6\5\1\0\3\5"+
                    "\1\107\7\5\11\0\1\4\2\5\2\0\1\5\1\154"+
                    "\1\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
                    "\1\4\4\0\2\5\1\0\17\5\112\0\1\31\110\0"+
                    "\1\31\12\56\1\0\24\56\1\0\5\56\1\0\14\56"+
                    "\1\0\2\56\1\0\22\56\13\0\1\155\25\0\1\156"+
                    "\74\0\1\157\122\0\1\160\133\0\1\161\22\0\12\64"+
                    "\1\0\24\64\1\0\22\64\1\0\2\64\1\0\22\64"+
                    "\13\0\1\162\25\0\1\163\107\0\1\164\133\0\1\165"+
                    "\22\0\7\71\1\0\13\71\11\0\3\71\2\0\3\71"+
                    "\2\0\2\71\1\0\1\71\1\0\3\71\4\0\2\71"+
                    "\1\0\17\71\4\0\3\71\1\166\1\71\1\166\1\71"+
                    "\1\167\13\71\10\0\1\167\1\71\1\166\1\71\2\0"+
                    "\2\71\1\166\2\0\2\71\1\0\1\71\1\0\3\71"+
                    "\4\0\2\71\1\0\7\71\3\166\5\71\4\0\7\71"+
                    "\1\0\11\71\1\170\1\71\11\0\3\71\2\0\3\71"+
                    "\2\0\1\170\1\71\1\0\1\71\1\0\3\71\4\0"+
                    "\2\71\1\0\17\71\4\0\7\71\1\0\5\71\1\170"+
                    "\5\71\11\0\3\71\2\0\3\71\2\0\1\71\1\170"+
                    "\1\0\1\71\1\0\3\71\4\0\2\71\1\0\17\71"+
                    "\4\0\3\71\1\75\1\71\1\75\1\171\1\0\1\71"+
                    "\1\171\1\172\2\71\1\172\5\71\11\0\1\71\1\75"+
                    "\1\71\2\0\2\71\1\75\2\0\1\71\1\172\1\0"+
                    "\1\172\1\0\3\71\4\0\2\71\1\0\7\71\3\75"+
                    "\5\71\4\0\1\4\6\5\1\0\11\5\1\173\1\5"+
                    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
                    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
                    "\17\5\4\0\1\4\6\5\1\0\1\5\1\116\11\5"+
                    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
                    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
                    "\17\5\4\0\1\4\6\5\1\0\13\5\11\0\1\4"+
                    "\2\5\2\0\1\5\1\174\1\5\2\0\2\5\1\0"+
                    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
                    "\17\5\4\0\1\4\6\5\1\0\6\5\1\175\4\5"+
                    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
                    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
                    "\17\5\4\0\1\4\6\5\1\0\10\5\1\176\2\5"+
                    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
                    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
                    "\17\5\4\0\1\4\6\5\1\0\7\5\1\104\3\5"+
                    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
                    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
                    "\17\5\4\0\1\4\6\5\1\0\13\5\11\0\1\4"+
                    "\2\5\2\0\1\177\2\5\2\0\2\5\1\0\1\5"+
                    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\17\5"+
                    "\4\0\1\4\6\5\1\0\4\5\1\200\6\5\11\0"+
                    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
                    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\17\5"+
                    "\4\0\1\4\6\5\1\0\4\5\1\201\6\5\11\0"+
                    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
                    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\17\5"+
                    "\4\0\1\4\6\5\1\0\7\5\1\202\3\5\11\0"+
                    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
                    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\17\5"+
                    "\4\0\1\4\6\5\1\0\13\5\11\0\1\4\2\5"+
                    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\5\5\1\203\11\5"+
                    "\4\0\1\4\6\5\1\0\3\5\1\204\7\5\11\0"+
                    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
                    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\17\5"+
                    "\4\0\1\4\6\5\1\0\13\5\11\0\1\4\2\5"+
                    "\2\0\1\205\2\5\2\0\2\5\1\0\1\5\1\0"+
                    "\1\4\1\5\1\4\4\0\2\5\1\0\17\5\4\0"+
                    "\1\4\6\5\1\0\13\5\11\0\1\4\2\5\2\0"+
                    "\1\104\2\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\17\5\4\0\1\4"+
                    "\6\5\1\0\3\5\1\206\7\5\11\0\1\4\2\5"+
                    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\17\5\4\0\1\4"+
                    "\6\5\1\0\13\5\11\0\1\4\2\5\2\0\3\5"+
                    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
                    "\4\0\2\5\1\0\3\5\1\207\13\5\4\0\1\4"+
                    "\6\5\1\0\3\5\1\210\7\5\11\0\1\4\2\5"+
                    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\17\5\4\0\1\4"+
                    "\6\5\1\0\7\5\1\211\3\5\11\0\1\4\2\5"+
                    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\17\5\30\0\10\31"+
                    "\54\0\27\212\1\213\7\212\1\0\73\212\1\214\3\212"+
                    "\1\213\7\212\1\0\55\212\1\215\4\212\1\124\1\212"+
                    "\1\124\2\212\1\124\2\212\2\124\3\212\1\216\4\212"+
                    "\1\124\1\217\1\220\1\0\3\124\1\217\22\212\1\124"+
                    "\5\212\2\217\1\215\1\220\10\212\5\131\1\35\4\131"+
                    "\1\35\1\131\1\35\2\131\1\35\2\131\2\35\3\131"+
                    "\1\35\4\131\2\35\1\221\1\0\4\35\22\131\1\35"+
                    "\5\131\3\35\1\221\44\131\1\222\3\131\1\223\47\131"+
                    "\1\4\6\5\1\0\13\5\11\0\1\4\2\5\2\0"+
                    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
                    "\1\4\4\0\2\5\1\0\12\5\1\224\4\5\4\0"+
                    "\1\4\6\5\1\0\3\5\1\107\7\5\11\0\1\4"+
                    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
                    "\1\4\1\5\1\4\4\0\2\5\1\0\17\5\4\0"+
                    "\1\4\6\5\1\0\13\5\11\0\1\4\2\5\2\0"+
                    "\1\5\1\107\1\5\2\0\2\5\1\0\1\5\1\0"+
                    "\1\4\1\5\1\4\4\0\2\5\1\0\17\5\4\0"+
                    "\1\4\6\5\1\0\10\5\1\225\2\5\11\0\1\4"+
                    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
                    "\1\4\1\5\1\4\4\0\2\5\1\0\17\5\4\0"+
                    "\3\71\4\226\1\0\3\226\10\71\11\0\1\71\1\226"+
                    "\1\71\2\0\1\71\2\226\2\0\2\71\1\0\1\226"+
                    "\1\0\3\71\4\0\2\71\1\0\1\71\1\226\1\71"+
                    "\1\226\3\71\3\226\1\71\2\226\2\71\4\0\7\4"+
                    "\1\0\1\4\1\227\11\4\11\0\3\4\2\0\3\4"+
                    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
                    "\1\0\17\4\4\0\7\4\1\0\4\4\1\230\1\231"+
                    "\1\4\1\232\3\4\11\0\3\4\2\0\3\4\2\0"+
                    "\2\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
                    "\17\4\4\0\7\4\1\0\2\4\1\233\10\4\11\0"+
                    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
                    "\3\4\4\0\2\4\1\0\17\4\4\0\7\4\1\0"+
                    "\4\4\1\234\6\4\11\0\3\4\2\0\3\4\2\0"+
                    "\2\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
                    "\17\4\4\0\7\4\1\0\1\4\1\235\11\4\11\0"+
                    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
                    "\3\4\4\0\2\4\1\0\17\4\14\0\1\236\1\237"+
                    "\1\0\1\240\5\0\1\241\1\242\21\0\1\145\43\0"+
                    "\1\4\6\5\1\0\3\5\1\243\7\5\11\0\1\4"+
                    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
                    "\1\4\1\5\1\4\4\0\2\5\1\0\17\5\4\0"+
                    "\1\4\6\5\1\0\1\5\1\244\11\5\11\0\1\4"+
                    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
                    "\1\4\1\5\1\4\4\0\2\5\1\0\17\5\4\0"+
                    "\1\4\6\5\1\0\10\5\1\245\2\5\11\0\1\4"+
                    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
                    "\1\4\1\5\1\4\4\0\2\5\1\0\17\5\4\0"+
                    "\1\4\6\5\1\0\4\5\1\246\1\5\1\201\4\5"+
                    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
                    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
                    "\17\5\4\0\1\4\1\5\1\247\4\5\1\0\13\5"+
                    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
                    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
                    "\17\5\4\0\1\4\6\5\1\0\13\5\11\0\1\4"+
                    "\2\5\2\0\1\250\2\5\2\0\2\5\1\0\1\5"+
                    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\17\5"+
                    "\4\0\1\4\6\5\1\0\13\5\11\0\1\4\2\5"+
                    "\2\0\1\251\2\5\2\0\2\5\1\0\1\5\1\0"+
                    "\1\4\1\5\1\4\4\0\2\5\1\0\12\5\1\201"+
                    "\4\5\21\0\1\252\155\0\1\253\65\0\1\254\133\0"+
                    "\1\255\37\0\1\256\155\0\1\257\65\0\1\260\133\0"+
                    "\1\261\22\0\3\71\1\166\1\71\1\166\1\71\1\0"+
                    "\5\71\1\73\3\71\1\74\1\71\11\0\1\71\1\166"+
                    "\1\71\2\0\2\71\1\166\2\0\1\74\1\73\1\0"+
                    "\1\71\1\0\3\71\4\0\2\71\1\0\7\71\3\166"+
                    "\5\71\7\0\1\166\1\0\1\166\27\0\1\166\5\0"+
                    "\1\166\30\0\3\166\11\0\3\71\1\262\1\71\1\262"+
                    "\1\71\1\263\13\71\10\0\1\263\1\71\1\262\1\71"+
                    "\2\0\2\71\1\262\2\0\2\71\1\0\1\71\1\0"+
                    "\3\71\4\0\2\71\1\0\7\71\3\262\5\71\4\0"+
                    "\1\4\6\5\1\0\13\5\11\0\1\4\2\5\2\0"+
                    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
                    "\1\4\4\0\2\5\1\0\1\5\1\264\15\5\4\0"+
                    "\1\4\6\5\1\0\13\5\11\0\1\4\2\5\2\0"+
                    "\1\251\2\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\17\5\4\0\1\4"+
                    "\6\5\1\0\1\5\1\104\11\5\11\0\1\4\2\5"+
                    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\17\5\4\0\1\4"+
                    "\6\5\1\0\13\5\11\0\1\4\2\5\2\0\1\5"+
                    "\1\265\1\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\17\5\4\0\1\4"+
                    "\6\5\1\0\13\5\11\0\1\4\2\5\2\0\3\5"+
                    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
                    "\4\0\2\5\1\0\4\5\1\177\12\5\4\0\1\4"+
                    "\6\5\1\0\11\5\1\266\1\5\11\0\1\4\2\5"+
                    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\17\5\4\0\1\4"+
                    "\6\5\1\0\13\5\11\0\1\4\2\5\2\0\3\5"+
                    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
                    "\4\0\1\5\1\267\1\0\17\5\4\0\1\4\6\5"+
                    "\1\0\13\5\11\0\1\4\2\5\2\0\1\270\2\5"+
                    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
                    "\4\0\2\5\1\0\17\5\4\0\1\4\6\5\1\0"+
                    "\11\5\1\271\1\5\11\0\1\4\2\5\2\0\3\5"+
                    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
                    "\4\0\2\5\1\0\17\5\4\0\1\4\6\5\1\0"+
                    "\2\5\1\272\5\5\1\273\2\5\11\0\1\4\2\5"+
                    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\17\5\4\0\1\4"+
                    "\6\5\1\0\13\5\11\0\1\4\2\5\2\0\3\5"+
                    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
                    "\4\0\2\5\1\0\7\5\3\177\5\5\4\0\1\4"+
                    "\6\5\1\0\1\177\12\5\11\0\1\4\2\5\2\0"+
                    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
                    "\1\4\4\0\2\5\1\0\17\5\4\0\1\4\6\5"+
                    "\1\0\13\5\11\0\1\4\2\5\2\0\3\5\2\0"+
                    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
                    "\2\5\1\0\6\5\1\274\10\5\4\0\27\212\1\126"+
                    "\7\212\1\0\74\212\3\124\1\216\4\124\3\212\1\0"+
                    "\55\212\1\124\21\212\1\213\5\212\1\124\1\212\1\0"+
                    "\3\212\1\124\30\212\3\124\11\212\27\0\1\213\60\0"+
                    "\5\212\1\215\21\212\1\213\5\212\1\215\1\212\1\0"+
                    "\3\212\1\215\30\212\3\215\14\212\4\275\1\212\3\275"+
                    "\14\212\1\126\5\212\1\275\1\212\1\0\2\212\2\275"+
                    "\5\212\1\275\14\212\1\275\1\212\1\275\3\212\3\275"+
                    "\1\212\2\275\6\212\3\131\4\276\1\131\3\276\21\131"+
                    "\1\222\1\276\2\131\1\223\1\131\2\276\5\131\1\276"+
                    "\14\131\1\276\1\131\1\276\3\131\3\276\1\131\2\276"+
                    "\45\131\1\0\50\131\1\4\6\5\1\0\13\5\11\0"+
                    "\1\4\2\5\2\0\1\277\2\5\2\0\2\5\1\0"+
                    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
                    "\17\5\4\0\1\4\6\5\1\0\6\5\1\201\4\5"+
                    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
                    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
                    "\17\5\4\0\3\71\4\226\1\0\3\226\2\71\1\300"+
                    "\3\71\1\301\1\71\11\0\1\71\1\226\1\71\2\0"+
                    "\1\71\2\226\2\0\1\301\1\300\1\0\1\226\1\0"+
                    "\3\71\4\0\2\71\1\0\1\71\1\226\1\71\1\226"+
                    "\3\71\3\226\1\71\2\226\2\71\4\0\7\4\1\0"+
                    "\2\4\1\302\10\4\11\0\3\4\2\0\3\4\2\0"+
                    "\2\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
                    "\17\4\4\0\7\4\1\0\1\303\12\4\11\0\3\4"+
                    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
                    "\4\0\2\4\1\0\17\4\4\0\7\4\1\0\3\4"+
                    "\1\304\2\4\1\305\4\4\11\0\3\4\2\0\3\4"+
                    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
                    "\1\0\17\4\4\0\7\4\1\0\7\4\1\306\3\4"+
                    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
                    "\1\0\3\4\4\0\2\4\1\0\17\4\4\0\7\4"+
                    "\1\0\1\307\3\4\1\234\6\4\11\0\3\4\2\0"+
                    "\3\4\2\0\2\4\1\0\1\4\1\0\3\4\4\0"+
                    "\2\4\1\0\17\4\4\0\7\4\1\0\1\307\12\4"+
                    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
                    "\1\0\3\4\4\0\2\4\1\0\17\4\4\0\7\4"+
                    "\1\0\7\4\1\310\3\4\11\0\3\4\2\0\3\4"+
                    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
                    "\1\0\17\4\15\0\1\311\112\0\1\312\1\313\1\0"+
                    "\1\314\102\0\1\315\111\0\1\316\104\0\1\317\76\0"+
                    "\1\4\6\5\1\0\5\5\1\175\5\5\11\0\1\4"+
                    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
                    "\1\4\1\5\1\4\4\0\2\5\1\0\17\5\4\0"+
                    "\1\4\6\5\1\0\13\5\11\0\1\4\2\5\2\0"+
                    "\1\5\1\320\1\5\2\0\2\5\1\0\1\5\1\0"+
                    "\1\4\1\5\1\4\4\0\2\5\1\0\17\5\4\0"+
                    "\1\4\6\5\1\0\5\5\1\177\5\5\11\0\1\4"+
                    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
                    "\1\4\1\5\1\4\4\0\2\5\1\0\17\5\4\0"+
                    "\1\4\6\5\1\0\6\5\1\114\4\5\11\0\1\4"+
                    "\2\5\2\0\1\321\2\5\2\0\2\5\1\0\1\5"+
                    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\17\5"+
                    "\4\0\1\4\6\5\1\0\13\5\11\0\1\4\2\5"+
                    "\2\0\3\5\2\0\2\5\1\0\1\322\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\17\5\4\0\1\4"+
                    "\6\5\1\0\10\5\1\104\2\5\11\0\1\4\2\5"+
                    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\17\5\4\0\1\4"+
                    "\6\5\1\0\13\5\11\0\1\4\2\5\2\0\3\5"+
                    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
                    "\4\0\2\5\1\0\7\5\3\323\5\5\15\0\1\253"+
                    "\162\0\1\324\106\0\1\325\74\0\1\326\50\0\1\257"+
                    "\162\0\1\327\106\0\1\330\74\0\1\331\37\0\3\71"+
                    "\1\262\1\71\1\262\1\71\1\0\2\71\1\172\2\71"+
                    "\1\172\5\71\11\0\1\71\1\262\1\71\2\0\2\71"+
                    "\1\262\2\0\1\71\1\172\1\0\1\172\1\0\3\71"+
                    "\4\0\2\71\1\0\7\71\3\262\5\71\7\0\1\262"+
                    "\1\0\1\262\27\0\1\262\5\0\1\262\30\0\3\262"+
                    "\11\0\1\4\6\5\1\0\5\5\1\332\5\5\11\0"+
                    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
                    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\17\5"+
                    "\4\0\1\4\6\5\1\0\13\5\11\0\1\4\2\5"+
                    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\3\5\1\114\13\5"+
                    "\4\0\1\4\6\5\1\0\5\5\1\333\5\5\11\0"+
                    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
                    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\17\5"+
                    "\4\0\1\4\6\5\1\0\13\5\11\0\1\4\2\5"+
                    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\3\5\1\334\13\5"+
                    "\4\0\1\4\6\5\1\0\7\5\1\273\3\5\11\0"+
                    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
                    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\17\5"+
                    "\4\0\1\4\6\5\1\0\10\5\1\335\2\5\11\0"+
                    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
                    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\17\5"+
                    "\4\0\1\4\6\5\1\0\4\5\1\104\6\5\11\0"+
                    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
                    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\17\5"+
                    "\4\0\1\4\6\5\1\0\3\5\1\336\7\5\11\0"+
                    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
                    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\17\5"+
                    "\4\0\3\212\4\124\1\212\3\124\14\212\1\126\5\212"+
                    "\1\124\1\212\1\0\2\212\2\124\5\212\1\124\14\212"+
                    "\1\124\1\212\1\124\3\212\3\124\1\212\2\124\6\212"+
                    "\3\131\4\35\1\131\3\35\21\131\1\222\1\35\2\131"+
                    "\1\223\1\131\2\35\5\131\1\35\14\131\1\35\1\131"+
                    "\1\35\3\131\3\35\1\131\2\35\6\131\1\4\6\5"+
                    "\1\0\11\5\1\337\1\5\11\0\1\4\2\5\2\0"+
                    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
                    "\1\4\4\0\2\5\1\0\17\5\4\0\7\71\1\0"+
                    "\11\71\1\340\1\71\11\0\3\71\2\0\3\71\2\0"+
                    "\1\340\1\71\1\0\1\71\1\0\3\71\4\0\2\71"+
                    "\1\0\17\71\4\0\7\71\1\0\5\71\1\340\5\71"+
                    "\11\0\3\71\2\0\3\71\2\0\1\71\1\340\1\0"+
                    "\1\71\1\0\3\71\4\0\2\71\1\0\17\71\4\0"+
                    "\7\4\1\0\3\4\1\341\7\4\11\0\3\4\2\0"+
                    "\3\4\2\0\2\4\1\0\1\4\1\0\3\4\4\0"+
                    "\2\4\1\0\17\4\4\0\7\4\1\0\3\4\1\304"+
                    "\7\4\11\0\3\4\2\0\3\4\2\0\2\4\1\0"+
                    "\1\4\1\0\3\4\4\0\2\4\1\0\17\4\4\0"+
                    "\7\4\1\0\2\4\1\342\10\4\11\0\3\4\2\0"+
                    "\3\4\2\0\2\4\1\0\1\4\1\0\3\4\4\0"+
                    "\2\4\1\0\17\4\4\0\7\4\1\0\1\4\1\342"+
                    "\11\4\11\0\3\4\2\0\3\4\2\0\2\4\1\0"+
                    "\1\4\1\0\3\4\4\0\2\4\1\0\17\4\4\0"+
                    "\7\4\1\0\10\4\1\343\2\4\11\0\3\4\2\0"+
                    "\3\4\2\0\2\4\1\0\1\4\1\0\3\4\4\0"+
                    "\2\4\1\0\17\4\4\0\7\4\1\0\1\4\1\304"+
                    "\11\4\11\0\3\4\2\0\3\4\2\0\2\4\1\0"+
                    "\1\4\1\0\3\4\4\0\2\4\1\0\17\4\4\0"+
                    "\7\4\1\0\6\4\1\344\4\4\11\0\3\4\2\0"+
                    "\3\4\2\0\2\4\1\0\1\4\1\0\3\4\4\0"+
                    "\2\4\1\0\17\4\16\0\1\345\105\0\1\346\112\0"+
                    "\1\347\2\0\1\350\110\0\1\351\100\0\1\352\3\0"+
                    "\1\316\103\0\1\352\116\0\1\353\70\0\1\4\6\5"+
                    "\1\0\13\5\11\0\1\4\2\5\2\0\3\5\2\0"+
                    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
                    "\2\5\1\0\2\5\1\104\14\5\4\0\1\4\6\5"+
                    "\1\0\3\5\1\354\7\5\11\0\1\4\2\5\2\0"+
                    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
                    "\1\4\4\0\2\5\1\0\17\5\4\0\1\4\6\5"+
                    "\1\0\7\5\1\355\3\5\11\0\1\4\2\5\2\0"+
                    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
                    "\1\4\4\0\2\5\1\0\17\5\4\0\1\4\6\5"+
                    "\1\0\13\5\11\0\1\4\2\5\2\0\3\5\2\0"+
                    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
                    "\2\5\1\0\12\5\1\207\4\5\32\0\1\356\77\0"+
                    "\1\253\45\0\1\324\24\0\1\326\1\357\4\326\1\357"+
                    "\13\326\3\357\1\326\1\357\2\0\2\357\1\0\2\326"+
                    "\2\0\3\326\1\0\1\357\2\326\1\357\1\326\1\0"+
                    "\1\357\1\326\5\357\2\326\1\357\17\326\2\0\1\357"+
                    "\27\0\1\360\77\0\1\257\45\0\1\327\24\0\1\331"+
                    "\1\361\4\331\1\361\13\331\3\361\1\331\1\361\2\0"+
                    "\2\361\1\0\2\331\2\0\3\331\1\0\1\361\2\331"+
                    "\1\361\1\331\1\0\1\361\1\331\5\361\2\331\1\361"+
                    "\17\331\2\0\1\361\1\0\1\4\6\5\1\0\1\5"+
                    "\1\177\11\5\11\0\1\4\2\5\2\0\3\5\2\0"+
                    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
                    "\2\5\1\0\17\5\4\0\1\4\6\5\1\0\1\5"+
                    "\1\362\11\5\11\0\1\4\2\5\2\0\3\5\2\0"+
                    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
                    "\2\5\1\0\17\5\4\0\1\4\6\5\1\0\13\5"+
                    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
                    "\1\5\1\0\1\4\1\5\1\4\4\0\1\104\1\5"+
                    "\1\0\17\5\4\0\1\4\6\5\1\0\7\5\1\363"+
                    "\3\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
                    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
                    "\1\0\17\5\4\0\1\4\6\5\1\0\4\5\1\364"+
                    "\6\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
                    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
                    "\1\0\17\5\4\0\1\4\6\5\1\0\7\5\1\365"+
                    "\3\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
                    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
                    "\1\0\17\5\4\0\7\4\1\0\4\4\1\305\6\4"+
                    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
                    "\1\0\3\4\4\0\2\4\1\0\17\4\4\0\7\4"+
                    "\1\0\7\4\1\342\3\4\11\0\3\4\2\0\3\4"+
                    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
                    "\1\0\17\4\4\0\7\4\1\0\3\4\1\366\7\4"+
                    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
                    "\1\0\3\4\4\0\2\4\1\0\17\4\17\0\1\367"+
                    "\107\0\1\347\106\0\1\370\106\0\1\370\116\0\1\371"+
                    "\100\0\1\347\114\0\1\372\71\0\1\4\6\5\1\0"+
                    "\4\5\1\373\6\5\11\0\1\4\2\5\2\0\3\5"+
                    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
                    "\4\0\2\5\1\0\17\5\4\0\1\4\6\5\1\0"+
                    "\13\5\11\0\1\4\2\5\2\0\1\5\1\374\1\5"+
                    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
                    "\4\0\2\5\1\0\17\5\32\0\1\326\107\0\1\331"+
                    "\61\0\1\4\6\5\1\0\7\5\1\375\3\5\11\0"+
                    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
                    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\17\5"+
                    "\4\0\1\4\6\5\1\0\13\5\11\0\1\4\2\5"+
                    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\5\5\1\104\11\5"+
                    "\4\0\1\4\6\5\1\0\13\5\11\0\1\4\2\5"+
                    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\4\5\1\104\12\5"+
                    "\4\0\1\4\6\5\1\0\1\5\1\201\11\5\11\0"+
                    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
                    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\17\5"+
                    "\4\0\7\4\1\0\10\4\1\376\2\4\11\0\3\4"+
                    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
                    "\4\0\2\4\1\0\17\4\20\0\1\350\112\0\1\370"+
                    "\103\0\1\377\74\0\1\4\6\5\1\0\11\5\1\175"+
                    "\1\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
                    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
                    "\1\0\17\5\4\0\1\4\6\5\1\0\13\5\11\0"+
                    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
                    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\4\5"+
                    "\1\u0100\12\5\4\0\1\4\6\5\1\0\13\5\11\0"+
                    "\1\4\1\u0101\1\5\2\0\3\5\2\0\2\5\1\0"+
                    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
                    "\7\5\1\u0102\1\u0103\3\5\1\u0104\2\5\4\0\7\4"+
                    "\1\0\4\4\1\342\6\4\11\0\3\4\2\0\3\4"+
                    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
                    "\1\0\17\4\24\0\1\u0105\67\0\1\4\6\5\1\0"+
                    "\13\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
                    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
                    "\1\0\14\5\1\u0106\2\5\4\0\1\4\6\5\1\0"+
                    "\13\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
                    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
                    "\1\0\13\5\1\u0107\3\5\4\0\1\4\6\5\1\0"+
                    "\13\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
                    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
                    "\1\0\13\5\1\u0108\3\5\4\0\1\4\6\5\1\0"+
                    "\13\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
                    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
                    "\1\0\13\5\1\u0109\3\5\4\0\1\4\6\5\1\0"+
                    "\11\5\1\u010a\1\5\11\0\1\4\2\5\2\0\3\5"+
                    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
                    "\4\0\2\5\1\0\17\5\20\0\1\370\73\0\1\4"+
                    "\6\5\1\0\10\5\1\u010b\2\5\11\0\1\4\2\5"+
                    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\17\5\4\0\1\4"+
                    "\6\5\1\0\13\5\11\0\1\4\2\5\2\0\3\5"+
                    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
                    "\4\0\2\5\1\0\15\5\1\u010c\1\5\4\0\1\4"+
                    "\6\5\1\0\13\5\11\0\1\4\2\5\2\0\3\5"+
                    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
                    "\4\0\2\5\1\0\15\5\1\u010c\1\u010d\4\0\1\4"+
                    "\6\5\1\0\13\5\11\0\1\4\2\5\2\0\3\5"+
                    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
                    "\4\0\2\5\1\0\16\5\1\u010e\4\0\1\4\6\5"+
                    "\1\0\13\5\11\0\1\4\2\5\2\0\3\5\2\0"+
                    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
                    "\2\5\1\0\1\5\1\332\15\5\4\0\1\4\6\5"+
                    "\1\0\5\5\1\u010f\2\5\1\u0110\2\5\11\0\1\4"+
                    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
                    "\1\4\1\5\1\4\4\0\2\5\1\0\17\5\4\0"+
                    "\1\4\6\5\1\0\13\5\11\0\1\4\2\5\2\0"+
                    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
                    "\1\4\4\0\1\u0111\1\5\1\0\17\5\4\0\1\4"+
                    "\6\5\1\0\1\5\1\u0112\11\5\11\0\1\4\2\5"+
                    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\17\5\4\0\1\4"+
                    "\6\5\1\0\1\5\1\u0113\11\5\11\0\1\4\2\5"+
                    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\17\5\4\0\1\4"+
                    "\6\5\1\0\10\5\1\u0114\2\5\11\0\1\4\2\5"+
                    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\17\5\4\0\1\4"+
                    "\6\5\1\0\7\5\1\u0115\3\5\11\0\1\4\2\5"+
                    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\17\5\4\0\1\4"+
                    "\6\5\1\0\13\5\11\0\1\4\2\5\2\0\1\5"+
                    "\1\u0116\1\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\17\5\4\0\1\4"+
                    "\6\5\1\0\13\5\11\0\1\4\2\5\2\0\3\5"+
                    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
                    "\4\0\2\5\1\0\3\5\1\u0117\13\5\4\0\1\4"+
                    "\6\5\1\0\13\5\11\0\1\4\2\5\2\0\3\5"+
                    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
                    "\4\0\2\5\1\0\3\5\1\265\13\5\4\0\1\4"+
                    "\6\5\1\0\7\5\1\u0118\3\5\11\0\1\4\2\5"+
                    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
                    "\1\5\1\4\4\0\2\5\1\0\17\5\4\0\1\4"+
                    "\6\5\1\0\1\u0118\12\5\11\0\1\4\2\5\2\0"+
                    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
                    "\1\4\4\0\2\5\1\0\17\5\4\0\1\4\6\5"+
                    "\1\0\1\u0119\12\5\11\0\1\4\2\5\2\0\3\5"+
                    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
                    "\4\0\2\5\1\0\17\5\4\0\1\4\6\5\1\0"+
                    "\13\5\11\0\1\4\2\5\2\0\1\u0107\2\5\2\0"+
                    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
                    "\2\5\1\0\17\5\4\0\1\4\6\5\1\0\10\5"+
                    "\1\u011a\2\5\11\0\1\4\2\5\2\0\3\5\2\0"+
                    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
                    "\2\5\1\0\17\5\4\0\1\4\6\5\1\0\13\5"+
                    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
                    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
                    "\1\177\16\5\4\0";

    private static int [] zzUnpackTrans() {
        int [] result = new int[18432];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\3\0\20\1\1\11\4\1\1\11\2\1\1\11\6\1"+
                    "\1\11\1\1\1\11\12\1\1\11\5\1\1\11\32\1"+
                    "\1\0\2\11\2\1\1\11\3\1\1\11\12\1\1\0"+
                    "\7\1\2\0\1\11\6\0\1\1\1\0\23\1\1\11"+
                    "\7\1\1\11\12\1\5\0\7\1\10\0\1\1\1\0"+
                    "\25\1\4\0\1\1\2\0\4\1\2\0\1\1\2\0"+
                    "\14\1\7\0\2\1\4\0\5\1\1\0\1\11\2\0"+
                    "\4\1\1\0\5\1\1\0\25\1";

    private static int [] zzUnpackAttribute() {
        int [] result = new int[282];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

  /* user code: */


    /**
     * Constructor.  This must be here because JFlex does not generate a
     * no-parameter constructor.
     */
    public GLSLTokenMaker() {
        super();
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     * @see #addToken(int, int, int)
     */
    private void addHyperlinkToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start,end, tokenType, so, true);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos-1, tokenType);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start,end, tokenType, so);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param array The character array.
     * @param start The starting offset in the array.
     * @param end The ending offset in the array.
     * @param tokenType The token's type.
     * @param startOffset The offset in the document at which this token
     *                    occurs.
     */
    public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
        super.addToken(array, start,end, tokenType, startOffset);
        zzStartRead = zzMarkedPos;
    }


    /**
     * Returns the text to place at the beginning and end of a
     * line to "comment" it in a this programming language.
     *
     * @return The start and end strings to add to a line to "comment"
     *         it out.
     */
    public String[] getLineCommentStartAndEnd() {
        return new String[] { "//", null };
    }


    /**
     * Returns the first token in the linked list of tokens generated
     * from <code>text</code>.  This method must be implemented by
     * subclasses so they can correctly implement syntax highlighting.
     *
     * @param text The text from which to get tokens.
     * @param initialTokenType The token type we should start with.
     * @param startOffset The offset into the document at which
     *                    <code>text</code> starts.
     * @return The first <code>Token</code> in a linked list representing
     *         the syntax highlighted text.
     */
    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

        resetTokenList();
        this.offsetShift = -text.offset + startOffset;

        // Start off in the proper state.
        int state = Token.NULL;
        switch (initialTokenType) {
            case Token.COMMENT_MULTILINE:
                state = MLC;
                start = text.offset;
                break;
            default:
                state = Token.NULL;
        }

        s = text;
        try {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return new TokenImpl();
        }

    }


    /**
     * Refills the input buffer.
     *
     * @return      <code>true</code> if EOF was reached, otherwise
     *              <code>false</code>.
     * @exception   IOException  if any I/O-Error occurs.
     */
    private boolean zzRefill() throws java.io.IOException {
        //CORRECT METHOD
        return zzCurrentPos>=s.offset+s.count;
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>YY_INITIAL</tt>.
     *
     * @param reader   the new input stream
     */
    public final void yyreset(java.io.Reader reader) throws java.io.IOException {
        //CORRECT METHOD
        // 's' has been updated.
        zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
        //zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtBOL  = true;
        zzAtEOF  = false;
    }




    /**
     * Creates a new scanner
     * There is also a java.io.InputStream version of this constructor.
     *
     * @param   in  the java.io.Reader to read input from.
     */
    public GLSLTokenMaker(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param   in  the java.io.Inputstream to read input from.
     */
    public GLSLTokenMaker(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed   the packed character translation table
     * @return         the unpacked character translation table
     */
    private static char [] zzUnpackCMap(String packed) {
        char [] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 178) {
            int  count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead+pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos-zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param   errorCode  the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number)  {
        if ( number > yylength() )
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return      the next token
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char [] zzBufferL = zzBuffer;
        char [] zzCMapL = ZZ_CMAP;

        int [] zzTransL = ZZ_TRANS;
        int [] zzRowMapL = ZZ_ROWMAP;
        int [] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];


            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = zzBufferL[zzCurrentPosL++];
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    }
                    else {
                        // store back cached positions
                        zzCurrentPos  = zzCurrentPosL;
                        zzMarkedPos   = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL  = zzCurrentPos;
                        zzMarkedPosL   = zzMarkedPos;
                        zzBufferL      = zzBuffer;
                        zzEndReadL     = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        }
                        else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ( (zzAttributes & 1) == 1 ) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ( (zzAttributes & 8) == 8 ) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 27:
                { addToken(Token.PREPROCESSOR);
                }
                case 30: break;
                case 7:
                { addNullToken(); return firstToken;
                }
                case 31: break;
                case 24:
                { addToken(Token.LITERAL_CHAR);
                }
                case 32: break;
                case 21:
                { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
                }
                case 33: break;
                case 17:
                { start = zzMarkedPos-2; yybegin(MLC);
                }
                case 34: break;
                case 9:
                { addToken(Token.WHITESPACE);
                }
                case 35: break;
                case 26:
                { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
                }
                case 36: break;
                case 18:
                { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
                }
                case 37: break;
                case 25:
                { addToken(Token.ERROR_STRING_DOUBLE);
                }
                case 38: break;
                case 14:
                { addToken(Token.LITERAL_NUMBER_FLOAT);
                }
                case 39: break;
                case 15:
                { addToken(Token.RESERVED_WORD);
                }
                case 40: break;
                case 5:
                { addToken(Token.SEPARATOR);
                }
                case 41: break;
                case 2:
                { addToken(Token.IDENTIFIER);
                }
                case 42: break;
                case 12:
                { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
                }
                case 43: break;
                case 16:
                { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
                }
                case 44: break;
                case 23:
                { addToken(Token.FUNCTION);
                }
                case 45: break;
                case 6:
                { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
                }
                case 46: break;
                case 8:
                { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
                }
                case 47: break;
                case 22:
                { addToken(Token.DATA_TYPE);
                }
                case 48: break;
                case 1:
                { addToken(Token.ERROR_IDENTIFIER);
                }
                case 49: break;
                case 19:
                { addToken(Token.ERROR_CHAR);
                }
                case 50: break;
                case 20:
                { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
                }
                case 51: break;
                case 29:
                { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
                }
                case 52: break;
                case 28:
                { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
                }
                case 53: break;
                case 13:
                { addToken(Token.ERROR_NUMBER_FORMAT);
                }
                case 54: break;
                case 3:
                { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
                }
                case 55: break;
                case 4:
                { addToken(Token.OPERATOR);
                }
                case 56: break;
                case 10:
                {
                }
                case 57: break;
                case 11:
                { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
                }
                case 58: break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        switch (zzLexicalState) {
                            case EOL_COMMENT: {
                                addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
                            }
                            case 283: break;
                            case YYINITIAL: {
                                addNullToken(); return firstToken;
                            }
                            case 284: break;
                            case MLC: {
                                addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
                            }
                            case 285: break;
                            default:
                                return null;
                        }
                    }
                    else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
